@using TCSA.V2026.Data.DTOs
<MudDialog>
    <TitleContent>
        @MudDialog.Title
    </TitleContent>
    <DialogContent>
        @if (Notifications != null && Notifications.Any())
        {
            <MudStack>
                @foreach (var n in Notifications)
                {
                    <MudPaper Elevation="2" Class="pa-2 my-1">
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <MudImage Src="@GetIcon(n.Description, n.IconUrl)" Width="30" Class="mr-3" />
                            <MudText>@n.Description</MudText>
                        </div>
                    </MudPaper>
                }
            </MudStack>
        } else
        {
            <MudText Typo="Typo.body1">
                You don’t have any notifications at the moment. Enjoy your day!
            </MudText>
        }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    [Parameter] public IEnumerable<TCSANotificationItem> Notifications { get; set; }

    private string GetIcon(string description, string iconUrl)
    {
        return description.Contains("belt") ? $"img/belts/{iconUrl}" : $"img/icons/{iconUrl}";
    }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();
}
