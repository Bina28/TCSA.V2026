@using TCSA.V2026.Data.DTOs
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Data.Models.Responses
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services

@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        @foreach (var task in Tasks)
        {
            <MudCard Class="mt-1 mb-1" Style="@(task.Status == Data.DTOs.TaskStatus.Completed ? "border: 2px solid green;" : null)">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudImage Width="40" Src="@($"img/icons/{task.IconUrl}")" />
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@task.Title</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        @if(task.Status == Data.DTOs.TaskStatus.Completed)
                        {
                            <MudChip Class="mt-3 ml-5"
                            T="string"
                            Size="@Size.Large"
                            Color="Color.Success">
                                Completed
                            </MudChip>
                        } 
                        <MudButton 
                        Class="mt-3 ml-5 mr-5"
                        Size="@Size.Medium"
                        Variant="@Variant.Filled"
                        OnClick="@(() => JS.InvokeVoidAsync("window.open", DashboardProjectsHelpers.GetUrl(task.Area, task.Id, task.Slug), "_blank", "noopener,noreferrer"))"
                        Color="Color.Primary"
                        StartIcon="fas fa-eye">
                            View Task
                        </MudButton>
                        @if (task.Status != Data.DTOs.TaskStatus.Completed)
                        {
                            var color = task.Status == Data.DTOs.TaskStatus.PendingReview ? Color.Warning : Color.Success;
                            var text = task.Status == Data.DTOs.TaskStatus.PendingReview ? "Update PR" : "Submit PR";
                            <MudButton Class="mt-3 ml-5 mr-5"
                            Size="@Size.Medium"
                            Variant="@Variant.Filled" Color="@color"
                            OnClick="@(() => SubmitToReviewDialog(task.Id))"
                            EndIcon="@Icons.Material.Filled.Send">
                                @text
                            </MudButton>
                        }
                    </CardHeaderActions>
                </MudCardHeader>
            </MudCard>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    [Parameter] public int ProjectId { get; set; }
    [Parameter] public IEnumerable<DashboardTaskDisplay> Tasks { get; set; }
    [Parameter] public ApplicationUser User { get; set; }
    [Inject] private IJSRuntime JS { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private async Task SubmitToReviewDialog(int projectId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<TCSASubmitProjectDialog>
        {
            { p => p.ProjectId, projectId },
            { p => p.User, User }
        };
        var dialog = await DialogService.ShowAsync<TCSASubmitProjectDialog>("Submit Project", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var status = (ResponseStatus)result.Data;
            MudDialog.Close(DialogResult.Ok(status));
        }

    }
}
