@page "/dashboard"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TCSA.V2026.Components.UI
@using TCSA.V2026.Data.DTOs
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services
@attribute [Authorize]
<MudDialogProvider />

<PageTitle>Dashboard</PageTitle>

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<MudContainer>

    <DashboardToolBar></DashboardToolBar>
    <MudCheckBox @bind-Value="@_showCompleted" title="Show Completed" CheckedIcon="@Icons.Material.Outlined.CheckBox" 
    UncheckedIcon="@Icons.Material.Outlined.CheckBoxOutlineBlank"></MudCheckBox>
    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        @foreach (var area in Areas)
        {
            if (_showCompleted || (!_showCompleted && !area.IsCompleted))
            {


                <MudCard Class="mt-1" Style="@(area.IsCompleted ? "border: 2px solid green;" : null)">
                    <MudCardHeader Class="d-flex align-items-center">

                        <CardHeaderAvatar>
                            <MudImage Width="40" Src="@($"img/icons/{area.ImgUrl}")" />
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1" Style="font-weight: bold;">@area.CardName</MudText>
                            <MudText Typo="Typo.body2">@area.Description</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>

                            <MudButton 
                            Class ="mt-3"
                            Size="@Size.Medium"
                            Variant="@Variant.Filled"
                            OnClick="@(() => OpenAreaDialog(area.Tasks))"
                            Color="Color.Primary"
                            StartIcon="fas fa-eye" ></MudButton>

                            @if (area.IsCompleted)
                            {
                                <MudChip Class="mt-3 ml-5"
                                         T="string"
                                         Size="@Size.Large"
                                         Color="Color.Success">
                                    Completed
                                </MudChip>
                            }
                            <MudButton Class="mt-2 ml-5 mr-5"
                                       Size="@Size.Medium"
                                       Variant="@Variant.Filled"
                                       OnClick="@(() => OpenAreaDialog(area.Tasks))"
                                       Color="Color.Primary"
                                       StartIcon="fas fa-eye">

                                View Tasks
                            </MudButton>
                        </CardHeaderActions>
                    </MudCardHeader>
                </MudCard>   
            }
        }   
    }
</MudContainer>

@code {
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IUserService UserService { get; set; }

    [Inject] private ISnackbar SnackbarService { get; set; }
    [Inject] private IDialogService DialogService { get; set; }

    private bool _showCompleted = true;
    private List<DashboardAreaInfo> Areas = new();
    private List<int>? CompletedProjects = new();
    private List<int>? PendingProjects = new();
    private ApplicationUser User;

    private bool IsLoading = true;
    private bool IsLoggedIn = false;
    private string UserId;

    private async Task OpenAreaDialog(IEnumerable<DashboardTaskDisplay> tasks)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<TCSADashboardAreaDialog> { { x => x.Tasks, tasks } };
        var dialog = await DialogService.ShowAsync<TCSADashboardAreaDialog>(null, parameters, options);

        var result = await dialog.Result;

        if (result.Canceled)
        {
            SnackbarService.Add("Issue submitted successfully", Severity.Success);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();
        IsLoading = false;

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
        }
        else
        {
            return;
        }

        var claims = AuthSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);
        CompletedProjects = User?.DashboardProjects?.Where(x => x.IsCompleted).Select(x => x.ProjectId).ToList();
        PendingProjects = User?.DashboardProjects?.Where(x => x.IsPendingReview).Select(x => x.ProjectId).ToList();

        Areas = DashboardProjectsHelpers.GetAreas(CompletedProjects, PendingProjects);
    }
}
