@page "/dashboard"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TCSA.V2026.Components.UI
@using TCSA.V2026.Data.DTOs
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services
@attribute [Authorize]
<MudDialogProvider />

<PageTitle>Dashboard</PageTitle>

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<MudContainer>
    <DashboardToolBar></DashboardToolBar>

    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudExpansionPanels Class="mt-2" MultiExpansion="true">
            @foreach (var area in Areas)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudImage Width="40" Src="@($"img/icons/{area.ImgUrl}")"/>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@area.CardName</MudText>
                            <MudText Typo="Typo.body2">@area.Description</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton OnClick="@(() => OpenAreaDialog(area.Projects))" Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                </MudCard>
            }
        </MudExpansionPanels>
    }
</MudContainer>

@code {
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IUserService UserService { get; set; }

    [Inject] private ISnackbar SnackbarService { get; set; }
    [Inject] private IDialogService DialogService { get; set; }

    private List<DashboardAreaInfo> Areas = new();
    private List<int>? CompletedProjects = new();
    private ApplicationUser User;

    private bool IsLoading = true;
    private bool IsLoggedIn = false;
    private string UserId;

    private async Task OpenAreaDialog(IEnumerable<Article> projects)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<TCSADashboardAreaDialog> { { x => x.Projects, projects } };
        var dialog = await DialogService.ShowAsync<TCSADashboardAreaDialog>("View Projects", parameters, options);

        var result = await dialog.Result;

        if (result.Canceled)
        {
            SnackbarService.Add("Issue submitted successfully", Severity.Success);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();
        IsLoading = false;

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
        }
        else
        {
            return;
        }

        var claims = AuthSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);
        CompletedProjects = User?.DashboardProjects?.Where(x => x.IsCompleted).Select(x => x.ProjectId).ToList();

        Areas = DashboardProjectsHelpers.GetAreas(CompletedProjects);
    }
}
