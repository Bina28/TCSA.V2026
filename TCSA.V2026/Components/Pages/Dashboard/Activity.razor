@page "/dashboard/activity"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.DTOs
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Data.Models.Responses
@using TCSA.V2026.Components.UI
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services
@attribute [Authorize]
<MudDialogProvider />

<PageTitle>Activity</PageTitle>

<MudContainer>
    @if (User != null)
    {
        <DashboardToolBar User=@User></DashboardToolBar>
    }

    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudText>LoadTime: @LoadTime.TotalSeconds.ToString()</MudText>
        <MudSelect T="ActivityType?" Label="Filter by Activity Type" @bind-Value="SelectedActivityType" Class="my-2" Dense="true" Clearable="true">
            <MudSelectItem T="ActivityType?" Value="null">All</MudSelectItem>
            @foreach (var type in Enum.GetValues<ActivityType>())
            {
                <MudSelectItem T="ActivityType?" Value="@type">@type.ToString()</MudSelectItem>
            }
        </MudSelect>

        if (UserActivity != null && UserActivity.Count > 0) {
            <MudDataGrid Class="mt-2" Dense="true" Items="@UserActivity" RowStyle="GetRowStyle">
                <Columns>
                    <PropertyColumn Property="@(x => x.Date.ToString("MMM dd, yyyy, ddd"))" Title="DateTime" />
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row>
                                @((MarkupString)context.Item.Description)
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.ExperiencePoints" Title="XPs" />
                    <PropertyColumn Property="x => x.CurrentExperiencePoints" Title="Total XPs" />
                </Columns>
            </MudDataGrid>
        }
    }
</MudContainer>

@code {
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] protected ICommunityService CommunityService { get; set; }

    private ApplicationUser User { get; set; }
    private List<ActivityDisplay>? AllUserActivity = new();
    private List<ActivityDisplay>? UserActivity = new();

    private ActivityType? _selectedActivityType = null;
    private ActivityType? SelectedActivityType
    {
        get => _selectedActivityType;
        set
        {
            if (_selectedActivityType != value)
            {
                _selectedActivityType = value;
                FilterUserActivity();
            }
        }
    }

    private bool IsLoading = true;
    private string UserId = string.Empty;
    private TimeSpan LoadTime = TimeSpan.Zero;

    protected override async Task OnInitializedAsync()
    {
        var startTime = DateTime.UtcNow;
        var authSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!authSate.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("Account/Login");
        }

        var claims = authSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);

        var user = await UserService.GetDetailedUserById(UserId);
        AllUserActivity = ActivityHelper.GetActivityDisplay(user);

        FilterUserActivity();
        LoadTime = DateTime.UtcNow - startTime;

        IsLoading = false;
    }

    private void FilterUserActivity()
    {
        if (SelectedActivityType is null)
        {
            UserActivity = AllUserActivity;
        }
        else
        {
            UserActivity = AllUserActivity?.Where(x => x.ActivityType == SelectedActivityType.Value).ToList();
        }

        StateHasChanged();
    }
}
