@page "/dashboard/community"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Services
@attribute [Authorize]

<PageTitle>Community</PageTitle>

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<MudContainer>
    <DashboardToolBar></DashboardToolBar>

    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudDataGrid Class="mt-2" Items="@issuesToShow.OrderByDescending(i => i.Id)" Dense="true" RowStyle="GetRowStyle">
            <Columns>
                <PropertyColumn Property="i => i.Title" Title="Title" />
                <PropertyColumn Property="i => i.ExperiencePoints" Title="XPs" />
                <PropertyColumn Property="i => GetProjectName(i.CommunityProjectId)" Title="XPs" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            @if (!string.IsNullOrEmpty(context.Item.GithubUrl) && context.Item.GithubUrl.StartsWith("http"))
                            {
                                <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Primary"
                                OnClick="@(() => JS.InvokeVoidAsync("window.open", context.Item.GithubUrl, "_blank", "noopener,noreferrer"))">
                                    <MudIcon Icon="@Icons.Material.Filled.Link" Color="Color.Primary" />
                                </MudButton>
                            }
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    }
</MudContainer>

@code {
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] protected ICommunityService CommunityService { get; set; }

    [Inject] private IJSRuntime JS { get; set; }
    [Inject] private ISnackbar Snackbar { get; set; }

    private List<Project> projects;
    private List<CommunityIssue>? issuesToShow = new();
    private List<DashboardProject> userProjects = new();

    private bool IsLoading = true;
    private string userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!authSate.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("Account/Login");
        }

        projects = ProjectHelper.GetProjects();
        var claims = authSate.User;
        userId = claims.FindFirstValue(ClaimTypes.NameIdentifier);

        issuesToShow = await CommunityService.GetAvailableIssuesForCommunityPage(userId);

        IsLoading = false;
    }

    private string GetProjectName(int commProjectId) 
    {
        return commProjectId switch
        {
            54 => "Point Of Sale",
            87 => "Academy V2",
            207 => "Academy 2026"
        };
    }
}
