@page "/article/{ArticleId:int}/{ArticleSlug}"
@using System.Security.Claims
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Services

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@{
    int blockIndex = 0;
}

<PageTitle>@Article.Title</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Class="jumbotron d-flex align-center justify-center mt-3" Style="position: relative; height: 250px; background-image: url('/img/banners/article-banner.jpg'); background-size: cover; background-position: center;">
        <div class="jumbotron-overlay">
            <MudText Typo="Typo.h3" Class="text-white text-center">@Article.Title</MudText>
        </div>
    </MudPaper>
    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }

    @if (IsLoggedIn && IsCompleted)
    {
        <MudAlert Class="mt-5" Severity="Severity.Success" Elevation="2">You have completed this roadmap step.</MudAlert>
    }

    <MudGrid Class="mt-1">
        <MudItem>
            <MudPaper Class="d-flex flex-column mud-width-full py-1 pb-10 px-10">
                @foreach (var block in Article.Blocks)
                {
                    if (!string.IsNullOrWhiteSpace(block.Title))
                    {
                        <MudText Typo="Typo.h6" Class="mt-10 mb-2">@block.Title</MudText>
                    }

                    @foreach (var paragraph in block.Paragraphs)
                    {
                        if (paragraph.IsPicture)
                        {
                            <MudPaper Class="d-flex justify-center mx-20 mt-10 " Elevation="0">
                                <MudImage Src="@GetImage(paragraph)" Alt="Image paragraph" Fluid="true" Class="rounded-lg" />
                            </MudPaper>
                        }

                        else if (paragraph.IsVideo)
                        {
                            <div class="video-wrapper mt-3 mb-4">
                                <iframe class="video-iframe" src="@paragraph.VideoUrl" allowfullscreen></iframe>
                            </div>
                        }

                        else if (paragraph.IsCode)
                        {
                            <pre class="line-numbers"><code class="language-csharp">@((MarkupString)paragraph.Body)</code></pre>
                        }

                        else if (!string.IsNullOrEmpty(paragraph.Body))
                        {
                            if (!string.IsNullOrWhiteSpace(paragraph.BackgroundColor))
                            {
                                var bgStyle = $"background-color: {paragraph.BackgroundColor}; padding: 1rem;";
                                var textStyle = $"color: {paragraph.FontColor};";

                                <MudPaper Style="@bgStyle" Elevation="1" Class="my-2">
                                    <MudText Style="@textStyle" Typo="Typo.body1">
                                        @((MarkupString)paragraph.Body)
                                    </MudText>
                                </MudPaper>
                            }
                            else
                            {
                                <MudText Class="mt-2" Typo="Typo.body1">
                                    @((MarkupString)paragraph.Body)
                                </MudText>
                            }
                        }
                    }
                }
            </MudPaper>
        </MudItem>
    </MudGrid>

</MudContainer>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private IJSRuntime JS { get; set; }

    [Parameter] public string ArticleSlug { get; set; }
    [Parameter] public int ArticleId { get; set; }

    private Article Article { get; set; }

    private bool IsLoggedIn;
    private bool HasNext;
    private bool IsCompleted;
    private bool IsLoading;
    private string UserId = string.Empty;
    private string BackgroundImage;

    protected async override Task OnInitializedAsync()
    {
        await OnParametersSetAsync();
    }

    private string GetImage(Paragraph paragraph) => $"img/{paragraph.PictureUrl}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("highlightCode");
        }

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        Article = ArticleHelper.GetArticles().Single(x => x.Id == ArticleId);

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
            var claims = AuthSate.User;
            UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);

            IsCompleted = await ProjectService.IsProjectCompleted(UserId, ArticleId);
        }

        IsLoading = false;
    }
}

<style>
    a {
        color: #1976d2; /* Material blue */
        text-decoration: underline;
    }

    .jumbotron {
        background-image: url('/img/banners/article-banner.jpg');
        background-size: cover;
        box-shadow: inset 0 0 0 2000px rgba(0, 0, 0, 0.4) !important;
    }

    .jumbotron-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .text-white {
        color: white !important;
    }

    .video-wrapper {
        position: relative;
        width: 100%;
        padding-bottom: 56.25%; /* 16:9 aspect ratio */
        height: 0;
        overflow: hidden;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .video-iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: 0;
    }
</style>

