@page "/admin/{UserId}"
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@if (IsLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudPaper Width="600px">
        <MudList T="string">
            <MudListItem>
                <AvatarContent>
                    <MudAvatar>
                        <MudIcon Icon="@Icons.Material.Filled.PermIdentity" Color="Color.Primary" />
                    </MudAvatar>
                </AvatarContent>
                <ChildContent>
                    @User.Id
                </ChildContent>
            </MudListItem>
            <MudListItem>
                <AvatarContent>
                    <MudAvatar>
                        <MudIcon Icon="@Icons.Material.Filled.CardMembership" Color="Color.Primary" />
                    </MudAvatar>
                </AvatarContent>
                <ChildContent>
                    @User.DisplayName
                </ChildContent>
            </MudListItem>
            <MudListItem>
                <AvatarContent>
                    <MudAvatar>
                        <MudIcon Icon="@Icons.Material.Filled.Map" Color="Color.Primary" />
                    </MudAvatar>
                </AvatarContent>
                <ChildContent>
                    @User.Country
                </ChildContent>
            </MudListItem>
            <MudListItem>
                <AvatarContent>
                    <MudAvatar>
                        <MudIcon Icon="@Icons.Material.Filled.Score" Color="Color.Primary" />
                    </MudAvatar>
                </AvatarContent>
                <ChildContent>
                    @User.ExperiencePoints
                </ChildContent>
            </MudListItem>
            <MudListItem>
                <AvatarContent>
                    <MudAvatar>
                        <MudIcon Icon="@Icons.Material.Filled.CardTravel" Color="Color.Primary" />
                    </MudAvatar>
                </AvatarContent>
                <ChildContent>
                    @User.FirstName @User.LastName
                </ChildContent>
            </MudListItem>
            <MudListItem>
                <AvatarContent>
                    <MudAvatar>
                        <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Primary" />
                    </MudAvatar>
                </AvatarContent>
                <ChildContent>
                    @User.Email
                </ChildContent>
            </MudListItem>
            <MudListItem>
                <AvatarContent>
                    <MudAvatar>
                        <MudIcon Icon="@Icons.Custom.Brands.GitHub" Color="Color.Primary" />
                    </MudAvatar>
                </AvatarContent>
                <ChildContent>
                    @User.GithubUsername
                </ChildContent>
            </MudListItem>
            <MudListItem>
                <AvatarContent>
                    <MudAvatar>
                        <MudIcon Icon="@Icons.Custom.Brands.Discord" Color="Color.Primary" />
                    </MudAvatar>
                </AvatarContent>
                <ChildContent>
                    @User.DiscordAlias
                </ChildContent>
            </MudListItem>
            <MudListItem>
                <AvatarContent>
                    <MudAvatar>
                        <MudIcon Icon="@Icons.Material.Filled.ThumbUp" Color="Color.Primary" />
                    </MudAvatar>
                </AvatarContent>
                <ChildContent>
                    @(User.EmailConfirmed ? "Confirmed" : "NotConfirmed")
                </ChildContent>
            </MudListItem>
        </MudList>
    </MudPaper>

    <MudDataGrid Items="@User.DashboardProjects.OrderBy(dp => dp.IsCompleted)">
        <Columns>
            <PropertyColumn Property="dp => DashboardProjectsHelpers.GetProject(dp.ProjectId).Title" Title="Name" />
            <PropertyColumn Property="dp => dp.DateSubmitted" Title="DateTime" />
            <PropertyColumn Property="dp => dp.IsCompleted" Title="Status" />
            <TemplateColumn CellClass="d-flex justify-end" Style="@($"height:100%")">
                <CellTemplate>
                    <MudStack Row>
                        @if (!string.IsNullOrEmpty(context.Item.GithubUrl) && context.Item.GithubUrl.StartsWith("http"))
                        {
                            <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Primary"
                                       OnClick="@(() => JS.InvokeVoidAsync("window.open", context.Item.GithubUrl, "_blank", "noopener,noreferrer"))">
                                <MudIcon Icon="@Icons.Material.Filled.Link" Color="Color.Primary" />
                            </MudButton>
                        }
                        @if (!context.Item.IsCompleted)
                        {
                            <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Primary"
                                       OnClick="@(() => MarkAsCompleted(context.Item.Id))">
                                <MudIcon Icon="@Icons.Material.Filled.Pending" Color="Color.Primary" />
                            </MudButton>
                        } else 
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Primary" />
                        }
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@code {
    [Parameter] public string UserId { get; set; }
    [Inject] protected IUserService UserService { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private IJSRuntime JS { get; set; }

    private bool IsLoading = true;

    private ApplicationUser User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await UserService.GetUserForAdmin(UserId);
        IsLoading = false;
    }

    protected async Task MarkAsCompleted(int id)
    {
        User = await UserService.GetUserForAdmin(UserId);
        IsLoading = false;
    }
}
